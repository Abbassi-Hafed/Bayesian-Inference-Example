import tkinter as tk
from tkinter import *
from PIL import Image, ImageTk
import subprocess
import os
import webbrowser
import platform

import numpy as np
import random
from random import *
import matplotlib
from matplotlib.pylab import *
import scipy.stats
import matplotlib.pyplot as plt

def generate_random_samples(alpha, beta, n_samples):
    
    return np.random.gamma(alpha, beta, n_samples)

alpha = 2.0
beta = 1.0

myGen = generate_random_samples(alpha,beta,30000)
observations = myGen[np.random.randint(0, 30000, 3000)]

count, bins, ignored = plt.hist(observations, 40, density=True)
plt.xlabel("value")
plt.ylabel("Frequency")

def updating_alpha(alpha, mu = 0.0, sigma = 0.2):
    alpha += np.random.normal(0.0, 0.2)
    return alpha

def product_likelihood(observations,alpha):
    return np.log(scipy.stats.gamma.pdf(observations,alpha)).sum() 
    #return np.sum(np.log(scipy.stats.gamma.pdf(observations,alpha,1)))

# as written in the exercice sheet, the quotient should go to zero. 
# (for log it should go to 1 in order to get zero at the end)
# α is out of bounds -----> α > 0 and α < 10).

def prior(alpha): 
    if(alpha <=0 or alpha >=10): 
        return -np.exp(product_likelihood(observations,alpha))
    else:
        return 1

def acceptance_criterion(alpha_init,alpha, quotient):
    # if accepted 
    if quotient > 1 or quotient > np.random.uniform(0, 1):
        alpha = updating_alpha(alpha_init,mu = 0.0, sigma = 0.2)
            
    else: # if rejected
        pass
    
    return alpha_init,alpha

def sampling_algorithm(observations, alpha = 8.0, n_iterations = 7000):
    alpha_new = []
    accepted_values = []
    rejected_values = []
    for i in range(n_iterations):
        alpha_new.append(updating_alpha(alpha,mu=0.0, sigma=0.2))   
        quotient = (product_likelihood(observations,alpha_new[i]) + np.log(prior(alpha_new[i]))) / (product_likelihood(observations, alpha) + np.log(prior(alpha)))
        accepted, rejected = acceptance_criterion(alpha,alpha_new[i], quotient)
        accepted_values.append(accepted)
        rejected_values.append(rejected)
        alpha = 0.25 + 0.75*updating_alpha(alpha,mu = 0.0, sigma = 0.2)
        
    return np.array(accepted_values), np.array(rejected_values)

accepted_values, rejected_values = sampling_algorithm(observations, alpha = 8.0, n_iterations = 7000)
print(accepted_values, rejected_values)
N_iteration = np.arange(1,7001,1)


#==============================================================================================================================================
               # ================================================================================================
                                  #tracage de alpha acceptée et rejetée
                           # ==============================================================
                                     # =============================
# Sent for figure
font = {'size'   : 9}
matplotlib.rc('font', **font)

# Setup figure and subplots
fig = figure(num = 0, figsize = (12, 8))#, dpi = 100)
fig.suptitle("MCMC sampling for alpha: all samples are shown.", color='k', fontsize=12)
ax = subplot2grid((1, 1), (0, 0))
Rejec, = ax.plot(N_iteration,rejected_values,'r+', label="rejected")
Accep, = ax.plot(N_iteration,accepted_values,'b.', label="accepted")

# set legends
ax.legend([Accep,Rejec], [Accep.get_label(),Rejec.get_label()], loc="best", shadow=True)
#fig.legend([accepted],[accepter.get_label()], loc="upper left", fontsize=13, shadow=True)

# set label names
ax.set_xlabel("Iteration")
ax.set_ylabel(r"$\alpha$",fontsize=10)


# Turn on grids
ax.grid(True)



plt.savefig("MCMC.png")#, dpi=100, facecolor='w', edgecolor='w',orientation='portrait', format="png",transparent=False, pad_inches=0.1,frameon=False)
plt.show()


